name: Deploy SQS-Lambda Stack

on:
  push:
    branches: [main]
    paths:
      - 'aws/cdk/**'
      - '.github/workflows/cdk-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'aws/cdk/package-lock.json'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies
        run: npm ci
        working-directory: ./aws/cdk

      - name: Synthesize CloudFormation template
        run: |
          echo "Synthesizing CloudFormation template..."
          npx cdk synth --no-staging > template.yaml
        working-directory: ./aws/cdk
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          CDK_DEPLOY_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEPLOY_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy with CloudFormation
        run: |
          echo "Deploying to AWS in region ${{ secrets.AWS_REGION }} using CloudFormation..."
          
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name SqsLambdaStack 2>&1 | grep -q "Stack with id SqsLambdaStack does not exist"; then
            # Create stack if it doesn't exist
            aws cloudformation create-stack \
              --stack-name SqsLambdaStack \
              --template-body file://template.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          else
            # Update stack if it exists
            aws cloudformation update-stack \
              --stack-name SqsLambdaStack \
              --template-body file://template.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND || echo "No updates to be performed"
          fi
          
          # Wait for stack creation/update to complete
          echo "Waiting for stack operation to complete..."
          aws cloudformation wait stack-create-complete --stack-name SqsLambdaStack || true
          aws cloudformation wait stack-update-complete --stack-name SqsLambdaStack || true
          
          echo "Deployment completed!"
        working-directory: ./aws/cdk
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          VERCEL_APP_URL: ${{ secrets.VERCEL_APP_URL }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          EMAIL_QUEUE_URL: ${{ secrets.EMAIL_QUEUE_URL }} 
